datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  USER
  ADMIN
  PREMIUM
}

enum AccountType {
  PERSONAL
  BUSINESS
  JOINT
}

model User {
 id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  role          UserRole    @default(USER)
  
  // Authentication fields
  password      String?
  accounts      Account[]
  sessions      Session[]

  // User Profile
  profile       UserProfile?
  
  // Financial Data
  goals         Goal[]
  transactions  Transaction[]
  investments   Investment[]

  financialProfile FinancialProfile?
  dailyFinancialPlans DailyFinancialPlan[]
  transactions Transaction[]
  simulations  FinancialSimulation[]

  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
}

model Goal {
  id            String   @id @default(cuid())
  title         String
  targetAmount  Float
  currentAmount Float    @default(0)
  deadline      DateTime
  priority      Int      @default(3)
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  status        GoalStatus @default(ACTIVE)
}

enum GoalStatus {
  ACTIVE
  COMPLETED
  PAUSED
}

model FinancialProfile {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id])
  monthlyIncome Float
  monthlyExpenses Float
  creditScore   Int?
  assets        Float    @default(0)
  liabilities   Float    @default(0)
}

model Transaction {
  id            String     @id @default(cuid())
  userId        String
  user          User       @relation(fields: [userId], references: [id])
  amount        Float
  category      TransactionCategory
  date          DateTime
  description   String?
}

model FinancialSimulation {
  id            String     @id @default(cuid())
  userId        String
  goalId        String
  scenarioType  SimulationType
  projectedOutcome Float
  confidenceLevel Float
  createdAt     DateTime   @default(now())
}

enum TransactionCategory {
  INCOME
  HOUSING
  TRANSPORTATION
  FOOD
  UTILITIES
  HEALTHCARE
  SAVINGS
  INVESTMENTS
  ENTERTAINMENT
  MISC
}

enum SimulationType {
  CONSERVATIVE
  MODERATE
  AGGRESSIVE
}




model Goal {
  id            String   @id @default(cuid())
  title         String
  targetAmount  Float
  deadline      DateTime
  priority      Int
  status        GoalStatus
}

model Transaction {
  id            String   @id @default(cuid())
  amount        Float
  category      TransactionCategory
  date          DateTime
}

model FinancialProfile {
  monthlyIncome Float
  assets        Float
  liabilities   Float
  creditScore   Int?
}

model Goal {
  id            String      @id @default(cuid())
  title         String
  targetAmount  Float
  currentAmount Float       @default(0)
  deadline      DateTime
  status        GoalStatus  @default(ACTIVE)
  user          User        @relation(fields: [userId], references: [id])
  userId        String
}

enum GoalStatus {
  ACTIVE
  COMPLETED
  PAUSED
}

model Goal {
  id            String      @id @default(cuid())
  title         String
  targetAmount  Float
  currentAmount Float       @default(0)
  deadline      DateTime
  priority      Int         @default(2)
  status        GoalStatus  @default(ACTIVE)
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  notifications Notification[]
}

model Notification {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  type          String
  message       String
  relatedGoalId String?
  goal          Goal?       @relation(fields: [relatedGoalId], references: [id])
  read          Boolean     @default(false)
  createdAt     DateTime    @default(now())
}

model DailyFinancialPlan {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  planDetails  Json
  date         DateTime @default(now())
}

// Authentication Models
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
